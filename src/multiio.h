#ifndef MULTIIO_H
#define MULTIIO_H

#include <stdint.h>

#define CARD_NAME "Multi-IO"
#define PROGRAM_NAME "multiio"
#ifndef VERSION
# define VERSION "1.0.0"
#endif /* VERSION */

//#define SLAVE_BUFF_SIZE 128
#define HW_MAJOR	1
#define HW_MINOR	0
#define FW_MAJOR	1
#define FW_MINOR	0
#define OPTO_CH_NR 4
#define COUNTER_SIZE 4
#define ADC_CH_NO	3
#define ADC_RAW_CHANNELS 5
#define ADC_RAW_VAL_SIZE	2
#define ANALOG_VAL_SIZE 2
#define CH_NR_MIN 1
#define I_IN_CH_NO 2
#define U_IN_CH_NO 2
#define I_OUT_CH_NO 2
#define U_OUT_CH_NO 2
#define RTD_CH_NR 2
#define RTD_TEMP_DATA_SIZE 4
#define RTD_RES_DATA_SIZE 4
#define LED_NO 6

#define CALIBRATION_KEY 0xaa
#define RESET_CALIBRATION_KEY	0x55
#define WDT_RESET_SIGNATURE     0xca
#define WDT_RESET_COUNT_SIGNATURE    0xbe

#define CAL_0_10V_OUT_START_ID 6
#define CAL_0_10V_OUT_STOP_ID 7
#define CAL_4_20mA_OUT_START_ID 8
#define CAL_4_20mA_OUT_STOP_ID 9

#define VOLT_TO_MILIVOLT 1000
#define MILIAMPER_TO_MICROAMPER 1000

enum {
	CALIB_IN_PROGRESS = 0,
	CALIB_DONE,
	CALIB_ERROR,
};

enum {
	CALIB_CH_NONE = 0,
	CALIB_CH_V_IN,
	CALIB_CH_I_IN,
	CALIB_CH_RD_I_OUT,
	CALIB_CH_V_OUT,
	CALIB_CH_I_OUT,
};

enum {
	I2C_MEM_RELAYS,
	I2C_MEM_RELAY_SET,
	I2C_MEM_RELAY_CLR,
	I2C_MEM_LEDS,
	I2C_MEM_LED_SET,
	I2C_MEM_LED_CLR,
	I2C_MEM_OPTO,
	I2C_MEM_ANALOG_TYPE, //0b0000ooii where o mean output channel and i mean input channel,  0 = voltage (default), 1 = current
	I2C_MEM_V_IN,
	I2C_MEM_I_IN = I2C_MEM_V_IN + U_IN_CH_NO * ANALOG_VAL_SIZE,
	I2C_MEM_V_OUT = I2C_MEM_I_IN + U_IN_CH_NO * ANALOG_VAL_SIZE,
	I2C_MEM_I_OUT = I2C_MEM_V_OUT + U_OUT_CH_NO * ANALOG_VAL_SIZE,

	I2C_MEM_MOT_VAL = I2C_MEM_I_OUT + I_OUT_CH_NO * ANALOG_VAL_SIZE,

	I2C_MEM_SERVO_VAL1 = I2C_MEM_MOT_VAL + ADC_RAW_VAL_SIZE,
	I2C_MEM_SERVO_VAL2 = I2C_MEM_SERVO_VAL1 + 2, // 2 bytes

	I2C_MEM_RTD_VAL1_ADD = I2C_MEM_SERVO_VAL2 + 2,
	I2C_MEM_RTD_RES1_ADD = I2C_MEM_RTD_VAL1_ADD + RTD_CH_NR * RTD_TEMP_DATA_SIZE,

	I2C_MEM_DIAG_TEMPERATURE_ADD = I2C_MEM_RTD_RES1_ADD
		+ RTD_CH_NR * RTD_TEMP_DATA_SIZE,
	I2C_MEM_DIAG_3V3_MV_ADD,
	I2C_MEM_DIAG_3V3_MV_ADD1,
	I2C_MEM_OPTO_IT_RISING_ADD,
	I2C_MEM_OPTO_IT_FALLING_ADD,
	I2C_MEM_OPTO_ENC_ENABLE_ADD,
	I2C_MEM_OPTO_CNT_RST_ADD,
	I2C_MEM_OPTO_ENC_CNT_RST_ADD,
	I2C_MEM_OPTO_EDGE_COUNT_ADD,
	I2C_MEM_OPTO_ENC_COUNT_ADD = I2C_MEM_OPTO_EDGE_COUNT_ADD
		+ OPTO_CH_NR * COUNTER_SIZE,

	I2C_MEM_CALIB_VALUE = I2C_MEM_OPTO_ENC_COUNT_ADD
		+ OPTO_CH_NR * COUNTER_SIZE / 2,
	I2C_MEM_CALIB_CHANNEL = I2C_MEM_CALIB_VALUE + 4, //RTD [1/2]; 0-10_IN[3/4]; 4-20_IN[5/6]; 0-10_OUT[7/8]; 4-20_IN[9/10]
	I2C_MEM_CALIB_KEY, //set calib point -> 0xaa; reset calibration on the channel -> 0x55
	I2C_MEM_CALIB_STATUS,
	I2C_RTC_YEAR_ADD,
	I2C_RTC_MONTH_ADD,
	I2C_RTC_DAY_ADD,
	I2C_RTC_HOUR_ADD,
	I2C_RTC_MINUTE_ADD,
	I2C_RTC_SECOND_ADD,
	I2C_RTC_SET_YEAR_ADD,
	I2C_RTC_SET_MONTH_ADD,
	I2C_RTC_SET_DAY_ADD,
	I2C_RTC_SET_HOUR_ADD,
	I2C_RTC_SET_MINUTE_ADD,
	I2C_RTC_SET_SECOND_ADD,
	I2C_RTC_CMD_ADD,
	I2C_MEM_WDT_RESET_ADD,
	I2C_MEM_WDT_INTERVAL_SET_ADD,
	I2C_MEM_WDT_INTERVAL_GET_ADD = I2C_MEM_WDT_INTERVAL_SET_ADD + 2,
	I2C_MEM_WDT_INIT_INTERVAL_SET_ADD = I2C_MEM_WDT_INTERVAL_GET_ADD + 2,
	I2C_MEM_WDT_INIT_INTERVAL_GET_ADD = I2C_MEM_WDT_INIT_INTERVAL_SET_ADD + 2,
	I2C_MEM_WDT_RESET_COUNT_ADD = I2C_MEM_WDT_INIT_INTERVAL_GET_ADD + 2,
	I2C_MEM_WDT_CLEAR_RESET_COUNT_ADD = I2C_MEM_WDT_RESET_COUNT_ADD + 2,
	I2C_MEM_WDT_POWER_OFF_INTERVAL_SET_ADD,
	I2C_MEM_WDT_POWER_OFF_INTERVAL_GET_ADD = I2C_MEM_WDT_POWER_OFF_INTERVAL_SET_ADD
		+ 4,

	I2C_MEM_REVISION_HW_MAJOR_ADD = 0x78,
	I2C_MEM_REVISION_HW_MINOR_ADD,
	I2C_MEM_REVISION_MAJOR_ADD,
	I2C_MEM_REVISION_MINOR_ADD,

	SLAVE_BUFF_SIZE = 255,
};

#define ERROR	-1
#define OK		0
#define FAIL	-1
#define ARG_CNT_ERR -2
#define ARG_RANGE_ERROR -3
#define IO_ERROR -4

#define SLAVE_OWN_ADDRESS_BASE 0x06

#endif /* MULTIIO_H */

// vi:fdm=marker
